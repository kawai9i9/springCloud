debug: false
server:
  port: 8081
eureka:
  client:
    healthcheck:
      enabled: true #必须放在application.yml,开启健康检查(需要spring-boot-starter-actuator依赖)

spring:
  thymeleaf:
    cache: false

feign:
  hystrix:
    enabled: true
  client:
    config:
      oauth:
        logger-level: full    #NONE,BASIC,HEADERS,FULL
        connect-timeout: 30000    #连接超时
        read-timeout:  10000      #响应超时
        request-interceptors:
          - com.weilus.commons.feign.interceptors.DebugRequestInterceptor      #传递DEBUG参数到下一个服务
hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: SEMAPHORE #信号量隔离模式

security:
  metadata-source:
    no-check-token:
    - GET /teee1
    - POST /a/b/c
    - /ficon.con
    rules:              #自定义资源访问规则  <PATH_PATTERN>:<HAS_ROLES>
      GET /test: A
      POST /add: B,C
      POST /api/user/**: user:*,user:add,user:del,user:upd,user:get

logging:
  file: ${log.dir:/data/logs}/${spring.application.name}.log
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%thread]){faint} %clr(%-40.40logger{39}){cyan} %L %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
  level:
    com.weilus: DEBUG
    com.netflix.discovery: ERROR
    org.springframework: INFO
    org.springframework.security: DEBUG
    org.apache.ibatis: INFO
    org.springframework.jdbc: DEBUG

management:
  security:
    enabled: false
  health:
    redis:
      enabled: true
    rabbit:
      enabled: false
    db:
      enabled: false
